--- mysql-mmm-2.2.1/lib/Agent/Agent.pm	2010-05-07 07:55:50.000000000 +0000
+++ mysql-mmm-2.2.1/lib/Agent/Agent.pm	2017-12-26 03:13:01.604142761 +0000
@@ -31,6 +31,7 @@
 	ip					=> '$',
 	port				=> '$',
 	interface			=> '$',
+	eni     			=> '$',
 	mode				=> '$',
 	mysql_port			=> '$',
 	mysql_user			=> '$',
@@ -140,7 +141,7 @@
 	foreach my $role (keys(%{$main::config->{role}})) {
 		my $role_info = $main::config->{role}->{$role};
 		foreach my $ip (@{$role_info->{ips}}) {
-			my $res = MMM::Agent::Helpers::check_ip($self->interface, $ip);
+			my $res = MMM::Agent::Helpers::check_ip($self->interface, $ip, $self->eni);
 			my $ret = $? >> 8;
 			return "ERROR: Could not check if IP is configured: $res" if ($ret == 255);
 			next unless ($ret == 0);
@@ -171,7 +172,7 @@
 				last;
 			}
 			next if ($role_valid);
-			my $res = MMM::Agent::Helpers::check_ip($self->interface, $ip);
+			my $res = MMM::Agent::Helpers::check_ip($self->interface, $ip, $self->eni);
 			my $ret = $? >> 8;
 			return "ERROR: Could not check if IP is configured: $res" if ($ret == 255);
 			next if ($ret == 1);
@@ -266,6 +267,7 @@
 	$self->ip				($host->{ip});
 	$self->port				($host->{agent_port});
 	$self->interface		($host->{cluster_interface});
+	$self->eni      		($host->{eni});
 	$self->mode				($host->{mode});
 	$self->mysql_port		($host->{mysql_port});
 	$self->mysql_user		($host->{agent_user});
--- mysql-mmm-2.2.1/lib/Agent/Helpers.pm	2010-05-07 07:55:50.000000000 +0000
+++ mysql-mmm-2.2.1/lib/Agent/Helpers.pm	2017-12-26 02:50:27.791161158 +0000
@@ -18,7 +18,7 @@
 
 =over 4
 
-=item check_ip($if, $ip)
+=item check_ip($if, $ip, $eni)
 
 Check if the IP $ip is configured on interface $if.
 
@@ -26,14 +26,15 @@
 
 =cut
 
-sub check_ip($$) {
-	my $if = shift;
-	my $ip = shift;
-	return _execute('check_ip', "$if $ip");
+sub check_ip($$$) {
+	my $if  = shift;
+	my $ip  = shift;
+	my $eni = shift;
+	return _execute('check_ip', "$if $ip $eni");
 }
 
 
-=item configure_ip($if, $ip)
+=item configure_ip($if, $ip, $eni)
 
 Check if the IP $ip is configured on interface $if. If not, configure it and
 send arp requests to notify other hosts.
@@ -42,14 +43,15 @@
 
 =cut
 
-sub configure_ip($$) {
-	my $if = shift;
-	my $ip = shift;
-	return _execute('configure_ip', "$if $ip");
+sub configure_ip($$$) {
+	my $if  = shift;
+	my $ip  = shift;
+	my $eni = shift;
+	return _execute('configure_ip', "$if $ip $eni");
 }
 
 
-=item clear_ip($if, $ip)
+=item clear_ip($if, $ip, $eni)
 
 Remove the IP address $ip from interface $if.
 
@@ -57,10 +59,11 @@
 
 =cut
 
-sub clear_ip($$) {
-	my $if = shift;
-	my $ip = shift;
-	return _execute('clear_ip', "$if $ip");
+sub clear_ip($$$) {
+	my $if  = shift;
+	my $ip  = shift;
+	my $eni = shift;
+	return _execute('clear_ip', "$if $ip $eni");
 }
 
 
--- mysql-mmm-2.2.1/lib/Agent/Role.pm	2010-05-07 07:55:50.000000000 +0000
+++ mysql-mmm-2.2.1/lib/Agent/Role.pm	2017-12-26 03:10:03.530145181 +0000
@@ -37,9 +37,9 @@
 		}
 	}
 
-	$res = MMM::Agent::Helpers::configure_ip($main::agent->interface, $self->ip);
+	$res = MMM::Agent::Helpers::configure_ip($main::agent->interface, $self->ip, $main::agent->eni);
 	if (!defined($res) || $res !~ /^OK/) {
-		FATAL sprintf("Couldn't configure IP '%s' on interface '%s': %s", $self->ip, $main::agent->interface, defined($res) ? $res : 'undef');
+		FATAL sprintf("Couldn't configure IP '%s' on interface '%s': %s", $self->ip, $main::agent->interface, $main::agent->eni, defined($res) ? $res : 'undef');
 		return;
 	}
 }
@@ -67,7 +67,7 @@
 		}
 	}
 
-	$res = MMM::Agent::Helpers::configure_ip($main::agent->interface, $self->ip);
+	$res = MMM::Agent::Helpers::configure_ip($main::agent->interface, $self->ip, $main::agent->eni);
 	if (!defined($res) || $res !~ /^OK/) {
 		FATAL sprintf("Couldn't configure IP '%s' on interface '%s': %s", $self->ip, $main::agent->interface, defined($res) ? $res : 'undef');
 		return;
@@ -91,7 +91,7 @@
 		}
 	}
 
-	$res = MMM::Agent::Helpers::clear_ip($main::agent->interface, $self->ip);
+	$res = MMM::Agent::Helpers::clear_ip($main::agent->interface, $self->ip, $main::agent->eni);
 	if (!defined($res) || $res !~ /^OK/) {
 		FATAL sprintf("Couldn't clear IP '%s' from interface '%s': %s", $self->ip, $main::agent->interface, defined($res) ? $res : 'undef');
 	}
--- mysql-mmm-2.2.1/lib/Common/Config.pm	2010-05-07 07:55:50.000000000 +0000
+++ mysql-mmm-2.2.1/lib/Common/Config.pm	2017-12-26 03:11:11.700144255 +0000
@@ -63,6 +63,7 @@
 		'ip'					=> { 'required' => ['AGENT', 'MONITOR', 'TOOLS'] },
 		'mode'					=> { 'required' => ['AGENT', 'MONITOR'], 'values' => ['master', 'slave'] },
 		'peer'					=> { 'deprequired' => { 'mode' => 'master' }, 'refvalues' => 'host' },
+		'eni'   				=> { 'default' => 'null' },
 
 		'pid_path'				=> { 'required' => ['AGENT'] },
 		'bin_path'				=> { 'required' => ['AGENT'] },
--- mysql-mmm-2.2.1/lib/Agent/Helpers/Actions.pm	2010-05-07 07:55:50.000000000 +0000
+++ mysql-mmm-2.2.1/lib/Agent/Helpers/Actions.pm	2017-12-26 03:14:43.119141382 +0000
@@ -19,17 +19,18 @@
 
 =over 4
 
-=item check_ip($if, $ip)
+=item check_ip($if, $ip, $eni)
 
 Check if the IP $ip is configured on interface $if.
 
 =cut
 
-sub check_ip($$) {
+sub check_ip($$$) {
 	my $if	= shift;
 	my $ip	= shift;
+	my $eni = shift;
 	
-	if (MMM::Agent::Helpers::Network::check_ip($if, $ip)) {
+	if (MMM::Agent::Helpers::Network::check_ip($if, $ip, $eni)) {
 		_exit_ok('IP address is configured');
 	}
 
@@ -37,22 +38,23 @@
 }
 
 
-=item configure_ip($if, $ip)
+=item configure_ip($if, $ip, $eni)
 
 Check if the IP $ip is configured on interface $if. If not, configure it and
 send arp requests to notify other hosts.
 
 =cut
 
-sub configure_ip($$) {
+sub configure_ip($$$) {
 	my $if	= shift;
 	my $ip	= shift;
+	my $eni	= shift;
 	
-	if (MMM::Agent::Helpers::Network::check_ip($if, $ip)) {
+	if (MMM::Agent::Helpers::Network::check_ip($if, $ip, $eni)) {
 		_exit_ok('IP address is configured');
 	}
 
-	if (!MMM::Agent::Helpers::Network::add_ip($if, $ip)) {
+	if (!MMM::Agent::Helpers::Network::add_ip($if, $ip, $eni)) {
 		_exit_error("Could not configure ip adress $ip on interface $if!");
 	}
 	MMM::Agent::Helpers::Network::send_arp($if, $ip);
@@ -60,21 +62,22 @@
 }
 
 
-=item clear_ip($if, $ip)
+=item clear_ip($if, $ip, $eni)
 
 Remove the IP address $ip from interface $if.
 
 =cut
 
-sub clear_ip($$) {
+sub clear_ip($$$) {
 	my $if	= shift;
 	my $ip	= shift;
+	my $eni = shift;
 	
-	if (!MMM::Agent::Helpers::Network::check_ip($if, $ip)) {
+	if (!MMM::Agent::Helpers::Network::check_ip($if, $ip, $eni)) {
 		_exit_ok('IP address is not configured');
 	}
 
-	MMM::Agent::Helpers::Network::clear_ip($if, $ip);
+	MMM::Agent::Helpers::Network::clear_ip($if, $ip, $eni);
 	_exit_ok();
 }
 
--- mysql-mmm-2.2.1/lib/Agent/Helpers/Network.pm	2018-08-22 03:06:46.854934889 +0000
+++ mysql-mmm-2.2.1/lib/Agent/Helpers/Network.pm	2018-08-22 03:13:18.894539206 +0000
@@ -23,7 +23,7 @@
 
 =over 4
 
-=item check_ip($if, $ip)
+=item check_ip($if, $ip, $eni)
 
 Check if the IP $ip is configured on interface $if. Returns 0 if not, 1 otherwise.
 
@@ -32,15 +32,21 @@
 sub check_ip($$) {
 	my $if = shift;
 	my $ip = shift;
+	my $eni = shift;
 
 	if ($ip !~ /^[\d\.]*$/) {
 		_exit_error("ERROR: Invalid IP Address");
 	}
 
 	my $output;
+	my $output_aws;
 	if ($OSNAME eq 'linux') {
 		$output = `/sbin/ip addr show dev $if`;
 		_exit_error("Could not check if ip $ip is configured on $if: $output") if ($? >> 8 == 255);
+		if ($eni ne 'null') {
+			$output_aws = `aws ec2 describe-network-interfaces --network-interface-ids $eni |grep PrivateIpAddress`;
+			_exit_error("Could not check if ip $ip is configured on aws $eni: $output") if ($? >> 0);
+		}
 	}
 	elsif ($OSNAME eq 'solaris') {
 		# FIXME $if is not used here
@@ -56,10 +62,15 @@
 	}
 
 	return ($output =~ /\D+$ip\D+/) ? 1 : 0;
+	if ($eni eq 'null') {
+		return ($output =~ /\D+$ip\D+/) ? 1 : 0;
+	} else {
+		return (($output =~ /\D+$ip\D+/) && ($output_aws =~ /\D+$ip\D+/)) ? 1 : 0;
+	} 
 }
 
 
-=item add_ip($if, $ip)
+=item add_ip($if, $ip, $eni)
 
 Add IP $ip to the interface $if.
 
@@ -68,6 +79,7 @@
 sub add_ip($$) {
 	my $if = shift;
 	my $ip = shift;
+	my $eni = shift;
 
 	if ($ip !~ /^[\d\.]*$/) {
 		_exit_error("ERROR: Invalid IP Address");
@@ -77,6 +89,10 @@
 	if ($OSNAME eq 'linux') {
 		$output = `/sbin/ip addr add $ip/32 dev $if`;
 		_exit_error("Could not configure ip $ip on interface $if: $output") if ($? >> 8 == 255);
+		if ($eni ne 'null') {
+			$output = `aws ec2 assign-private-ip-addresses --network-interface-id $eni --private-ip-addresses $ip 2>&1`;
+			_exit_error("Could not configure ip $ip on aws interface $eni: $output") if ($? >> 0);
+		}
 	}
 	elsif ($OSNAME eq 'solaris') {
 		$output = `/usr/sbin/ifconfig $if addif $ip`;
@@ -95,11 +111,11 @@
 	else {
 		_exit_error("ERROR: Unsupported platform!");
 	}
-	return check_ip($if, $ip);
+	return check_ip($if, $ip, $eni);
 }
 
 
-=item clear_ip($if, $ip)
+=item clear_ip($if, $ip, $eni)
 
 Remove the IP $ip from the interface $if.
 
@@ -108,6 +124,7 @@
 sub clear_ip($$) {
 	my $if = shift;
 	my $ip = shift;
+	my $eni = shift;
 
 	if ($ip !~ /^[\d\.]*$/) {
 		_exit_error("ERROR: Invalid IP Address");
@@ -117,6 +134,10 @@
 	if ($OSNAME eq 'linux') {
 		$output = `/sbin/ip addr del $ip/32 dev $if`;
 		_exit_error("Could not remove ip $ip from interface $if: $output") if ($? >> 8 == 255);
+		if ($eni ne 'null') {
+			$output = `aws ec2 unassign-private-ip-addresses --network-interface-id $eni --private-ip-addresses $ip 2>&1`;
+			_exit_error("Could not remove ip $ip on aws interface $eni: $output") if ($? >> 0);
+		}
 	}
 	elsif ($OSNAME eq 'solaris') {
 		$output = `/usr/sbin/ifconfig $if removeif $ip`;
